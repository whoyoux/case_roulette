// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    //provider = "sqlite"
    provider     = "mysql"
    relationMode = "prisma"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id])

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@index([userId])
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?      @db.VarChar(500)
    accounts      Account[]
    sessions      Session[]
    balance       Float        @default(1000)
    openedCases   OpenedCase[]
    isAdmin       Boolean      @default(false)
}

model OpenedCase {
    id String @id @default(cuid())

    user   User?   @relation(fields: [userId], references: [id], onUpdate: Cascade)
    userId String?

    wonItem Item   @relation(fields: [itemId], references: [id], onUpdate: Cascade)
    itemId  String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId])
    @@index([itemId])
}

model Case {
    id       String       @id @default(cuid())
    name     String
    imageURL String       @db.VarChar(500)
    price    Float
    items    ItemInCase[]

    isAvailable Boolean  @default(true)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model ItemInCase {
    id       String @id @default(cuid())
    dropRate Int

    item   Item   @relation(fields: [itemId], references: [id], onUpdate: Cascade)
    itemId String

    case   Case?   @relation(fields: [caseId], references: [id], onUpdate: Cascade)
    caseId String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([itemId])
    @@index([caseId])
}

model Item {
    id       String @id @default(cuid())
    name     String
    imageURL String @db.VarChar(500)

    itemsInCase ItemInCase[]
    openedCases OpenedCase[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
